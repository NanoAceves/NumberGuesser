{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Card from \"../components/Card\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport Colors from \"../constants/Colors\";\nimport { direction_ as d } from \"../constants/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  console.log('min, max', min, max);\n  var randNum = Math.random() * (max - min) + min;\n  var randNumFloored = Math.floor(randNum);\n\n  if (randNumFloored === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return randNumFloored;\n  }\n};\n\nvar GameScreen = function GameScreen(_ref) {\n  var selectedNumber = _ref.selectedNumber,\n      onGameOver = _ref.onGameOver;\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n\n  var _useState = useState(generateRandomBetween(currentLow.current, currentHigh.current, selectedNumber)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rounds = _useState4[0],\n      setRounds = _useState4[1];\n\n  useEffect(function () {\n    if (currentGuess === selectedNumber) {\n      onGameOver(rounds, currentGuess);\n    }\n  }, [currentGuess]);\n  console.log(currentGuess);\n\n  var nextGuess = function nextGuess(direction) {\n    if (direction === d.higher && currentGuess > selectedNumber || direction === d.lower && currentGuess < selectedNumber) {\n      alert('Pls don\\t lie');\n      return;\n    }\n\n    if (direction === d.lower) {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess;\n    }\n\n    var nextNum = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n    setRounds(function (currentRounds) {\n      return setRounds(currentRounds + 1);\n    });\n    setCurrentGuess(nextNum);\n  };\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Text, {\n      children: \"Computer Guess: \"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      style: styles.buttonContainer,\n      children: [_jsx(Button, {\n        title: \"Lower\",\n        color: Colors.secondary,\n        onPress: function onPress() {\n          nextGuess(d.lower);\n        }\n      }), _jsx(Button, {\n        title: \"Higher\",\n        color: Colors.primary,\n        onPress: function onPress() {\n          nextGuess(d.higher);\n        }\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 20\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["C:/Users/nano0/Desktop/NumberGuesser/screens/GameScreen.js"],"names":["React","useState","useRef","useEffect","Card","NumberContainer","Colors","direction_","d","generateRandomBetween","min","max","exclude","Math","ceil","floor","console","log","randNum","random","randNumFloored","GameScreen","selectedNumber","onGameOver","currentLow","currentHigh","current","currentGuess","setCurrentGuess","rounds","setRounds","nextGuess","direction","higher","lower","alert","nextNum","currentRounds","styles","screen","buttonContainer","secondary","primary","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect} from 'react'\r\nimport { Button, StyleSheet, Text, TextInput, View, Alert } from \"react-native\";\r\nimport Card from '../components/Card';\r\nimport NumberContainer from '../components/NumberContainer';\r\nimport Colors from '../constants/Colors';\r\n\r\n//De los ahora varios objetos solo trae direction\r\nimport { direction_ as d} from '../constants/constants';\r\n\r\n// const generateRandomBetween = ( min, max, exclude ) => {\r\n//     min = Math.ceil(min);\r\n//     max = Math.floor(max);\r\n\r\n//     //Nos devolvera un numero al azar entre 0 y 1\r\n//     const randNum = Math.random() * (max - min) + min;\r\n//     const randNumFloored = Math.floor(randNum);\r\n\r\n//     if(randNum === exclude) {\r\n//         return generateRandomBetween(min, max, exclude);\r\n//     } else {\r\n//         randNumFloored;\r\n//     }\r\n// }\r\n\r\n\r\nconst generateRandomBetween = (min, max, exclude) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n  \r\n    console.log('min, max', min, max)\r\n  \r\n    const randNum = Math.random() * (max - min) + min;\r\n    const randNumFloored = Math.floor(randNum);\r\n  \r\n    if (randNumFloored === exclude) {\r\n      return generateRandomBetween(min, max, exclude);\r\n    } else {\r\n      return randNumFloored;\r\n    }\r\n  }\r\n  \r\n\r\nconst GameScreen = ({selectedNumber, onGameOver}) => {\r\n\r\n    const currentLow = useRef(1);\r\n    const currentHigh = useRef(100);\r\n    //generateRandomBetween(currentLow.current, currentHigh.current, selectedNumber\r\n    //const [currentGuess, setCurrentGuess] = useState(generateRandomBetween(1, 100, selectedNumber));\r\n    const [currentGuess, setCurrentGuess] = useState(generateRandomBetween(currentLow.current, currentHigh.current, selectedNumber));\r\n\r\n    //Se pone por defecto en 0\r\n    const [rounds, setRounds] = useState(0)\r\n\r\n    useEffect(() => {\r\n      if(currentGuess === selectedNumber) {\r\n        onGameOver(rounds, currentGuess)\r\n      }\r\n    }, [currentGuess])\r\n    \r\n\r\n    console.log(currentGuess);\r\n\r\n    const nextGuess = direction => {\r\n        if( (direction === d.higher && currentGuess > selectedNumber ) ||\r\n        (direction === d.lower && currentGuess < selectedNumber)) {\r\n            //Esto solo funciona en Android\r\n            // Alert('Pls don\\t lie', 'You know that\\'s wrong', [{text: 'Sorry', style: 'cancel'}])\r\n            alert('Pls don\\t lie')\r\n            return\r\n        }\r\n\r\n        if(direction === d.lower) {\r\n          currentHigh.current = currentGuess;\r\n        } else {\r\n          currentLow.current = currentGuess;\r\n        }\r\n\r\n        //const nextNum = generateRandomBetween(1, 100, selectedNumber);\r\n        const nextNum = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\r\n        setRounds(currentRounds => setRounds(currentRounds + 1))\r\n        setCurrentGuess(nextNum);\r\n\r\n        // if(nextNum === selectedNumber) {\r\n        //   alert('You won!!!')\r\n        // }\r\n    }\r\n\r\n  return (\r\n    <View style={styles.screen}>\r\n      <Text>Computer Guess: </Text>\r\n      <NumberContainer>{currentGuess}</NumberContainer>\r\n      <Card style={styles.buttonContainer}>\r\n          <Button title='Lower' color={Colors.secondary} onPress={ () => {nextGuess(d.lower)} } />\r\n          <Button title='Higher' color={Colors.primary} onPress={ () => {nextGuess(d.higher)} } />\r\n      </Card>\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n      flex: 1,\r\n      padding: 10,\r\n      alignItems: 'center',\r\n  },\r\n  buttonContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    marginTop: 20,\r\n  }\r\n})\r\n\r\nexport default GameScreen"]},"metadata":{},"sourceType":"module"}