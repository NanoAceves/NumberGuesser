{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useState } from 'react';\nimport Card from \"../components/Card\";\nimport Colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport { globalIndexes as limit } from \"../constants/constants\";\nimport { useFetchpokemon } from \"../hooks/useFetchpokemon\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StartGameScreen = function StartGameScreen(_ref) {\n  var onStartGame = _ref.onStartGame;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      confirmed = _useState2[0],\n      setConfirmed = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      enteredValue = _useState4[0],\n      setEnteredValue = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedNumber = _useState6[0],\n      setSelectedNumer = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      name = _useState8[0],\n      setName = _useState8[1];\n\n  var numberInputHandler = function numberInputHandler(input) {\n    return setEnteredValue(input.replace(/[^0-9]/g, ''));\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredValue('');\n    setConfirmed(false);\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredValue);\n    if (isNaN(chosenNumber) || chosenNumber <= limit.MIN_INDEX || chosenNumber > limit.MAX_INDEX) return;\n    setConfirmed(true);\n    setSelectedNumer(chosenNumber);\n    setEnteredValue('');\n    setPokemon();\n  };\n\n  var setPokemin = function setPokemin() {\n    var _await$useFetchpokemo, _await$useFetchpokemo2, name, img;\n\n    return _regeneratorRuntime.async(function setPokemin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(useFetchpokemon(enteredValue));\n\n          case 2:\n            _await$useFetchpokemo = _context.sent;\n            _await$useFetchpokemo2 = _slicedToArray(_await$useFetchpokemo, 2);\n            name = _await$useFetchpokemo2[0];\n            img = _await$useFetchpokemo2[1];\n            setName(name);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var confirmedOutput;\n\n  if (confirmed) {\n    confirmedOutput = _jsxs(Card, {\n      style: styles.selectedContainer,\n      children: [_jsx(Text, {\n        children: \"You selected: \"\n      }), _jsx(NumberContainer, {\n        children: selectedNumber\n      }), _jsx(Button, {\n        title: \"Ready to start game?\",\n        onPress: function onPress() {\n          return onStartGame(selectedNumber);\n        }\n      })]\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsxs(Card, {\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Select a Number\"\n      }), _jsx(Input, {\n        style: styles.input,\n        blurOnSubmit: true,\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        keyboardType: \"number-pad\",\n        maxLen: 3,\n        onChangeText: numberInputHandler,\n        value: enteredValue\n      }), _jsxs(View, {\n        style: styles.buttonContainer,\n        children: [_jsx(View, {\n          style: styles.button,\n          children: _jsx(Button, {\n            style: styles.button,\n            title: \"Reset\",\n            color: Colors.primary,\n            onPress: function onPress() {}\n          })\n        }), _jsx(View, {\n          style: styles.button,\n          children: _jsx(Button, {\n            style: styles.button,\n            title: \"Confirm\",\n            color: Colors.secondary,\n            onPress: confirmInputHandler\n          })\n        })]\n      })]\n    }), confirmedOutput]\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 20,\n    marginVertical: 10\n  },\n  button: {\n    width: 100\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    justifyContent: 'space-between',\n    paddingHorizontal: 15\n  },\n  input: {\n    width: 50,\n    textAlign: 'center'\n  },\n  selectedContainer: {\n    marginTop: 20,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default StartGameScreen;","map":{"version":3,"sources":["C:/Users/nano0/Desktop/NumberGuesser/screens/StartGameScreen.js"],"names":["useState","Card","Colors","Input","NumberContainer","globalIndexes","limit","useFetchpokemon","StartGameScreen","onStartGame","confirmed","setConfirmed","enteredValue","setEnteredValue","undefined","selectedNumber","setSelectedNumer","name","setName","numberInputHandler","input","replace","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","MIN_INDEX","MAX_INDEX","setPokemon","setPokemin","img","confirmedOutput","styles","selectedContainer","screen","title","buttonContainer","button","primary","secondary","StyleSheet","create","flex","padding","alignItems","fontSize","marginVertical","width","flexDirection","justifyContent","paddingHorizontal","textAlign","marginTop"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View, TextInput, Button} from 'react-native';\r\nimport { useState } from 'react'\r\n\r\nimport Card from '../components/Card';\r\nimport Colors from '../constants/colors';\r\nimport Input from '../components/Input';\r\nimport NumberContainer from '../components/NumberContainer';\r\n\r\nimport {globalIndexes as limit} from '../constants/constants';\r\nimport { useFetchpokemon } from '../hooks/useFetchpokemon';\r\n\r\nconst StartGameScreen = ({onStartGame}) => {\r\n    const [confirmed, setConfirmed]=useState(false)\r\n    const [enteredValue, setEnteredValue]=useState('')\r\n    const [selectedNumber, setSelectedNumer]=useState(undefined)\r\n    const [name, setName]=useState(undefined)\r\n\r\n    const numberInputHandler=input=>(\r\n        setEnteredValue(input.replace(/[^0-9]/g, ''))\r\n    )\r\n\r\n    const resetInputHandler=()=>{\r\n        setEnteredValue('')\r\n        setConfirmed(false)\r\n    }\r\n    const confirmInputHandler=()=>{\r\n        const chosenNumber=parseInt(enteredValue)\r\n        if (isNaN(chosenNumber)||chosenNumber<=limit.MIN_INDEX||chosenNumber>limit.MAX_INDEX) return\r\n\r\n        setConfirmed(true)\r\n        setSelectedNumer(chosenNumber)\r\n        setEnteredValue('')\r\n        setPokemon()\r\n    }\r\n\r\n    const setPokemin=async()=>{\r\n        const [name, img]=await useFetchpokemon(enteredValue);\r\n        setName(name)\r\n    }\r\n    let confirmedOutput;\r\n\r\n    if (confirmed){\r\n        confirmedOutput=(\r\n            <Card style={styles.selectedContainer}>\r\n                <Text>You selected: </Text>\r\n                <NumberContainer>\r\n                    {selectedNumber}\r\n                </NumberContainer>\r\n                <Button title='Ready to start game?'\r\n                onPress={()=>onStartGame(selectedNumber)}/>\r\n            </Card>\r\n            \r\n        )\r\n    }\r\n\r\n  return (\r\n    <View style={styles.screen}>\r\n        <Card>\r\n            <Text style={styles.title}>Select a Number</Text>\r\n            <Input\r\n                style={styles.input}\r\n                blurOnSubmit\r\n                autoCapitalize='none'\r\n                autoCorrect={false}\r\n                keyboardType=\"number-pad\"\r\n                maxLen={3}\r\n                onChangeText={numberInputHandler}\r\n                value={enteredValue}\r\n            />\r\n            <View style={styles.buttonContainer}>\r\n                <View style={styles.button}>\r\n                    <Button\r\n                    style={styles.button}\r\n                        title=\"Reset\"\r\n                        color={Colors.primary}\r\n                        onPress={()=>{}}\r\n                    />\r\n                </View>\r\n                \r\n                <View style={styles.button}>\r\n                    <Button\r\n                    style={styles.button}\r\n                        title=\"Confirm\"\r\n                        color={Colors.secondary}\r\n                        onPress={confirmInputHandler}\r\n                    />\r\n                </View>\r\n            </View>\r\n        </Card>\r\n        {confirmedOutput}\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n      flex:1,\r\n      padding:10,\r\n      alignItems:'center'\r\n  },\r\n  title:{\r\n      fontSize:20,\r\n      marginVertical:10,\r\n  },\r\n  button:{\r\n      width:100,\r\n  },\r\n  buttonContainer:{\r\n      flexDirection:'row',\r\n      width:'100%',\r\n    justifyContent:'space-between',\r\n    paddingHorizontal:15,  \r\n  },\r\n  input:{\r\n      width:50,\r\n      textAlign:'center'\r\n  },\r\n  selectedContainer:{\r\n      marginTop:20,\r\n      alignItems:'center',\r\n      justifyContent:'center'\r\n  },\r\n});\r\n\r\nexport default StartGameScreen"]},"metadata":{},"sourceType":"module"}