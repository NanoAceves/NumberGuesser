{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Header from \"./components/Header\";\nimport GameScreen from \"./screens/GameScreen\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport Colors from \"./constants/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedNumber = _useState2[0],\n      setSelectedNumber = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      numberOfGuesses = _useState4[0],\n      setNumberOfGuesses = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      numberGuessed = _useState6[0],\n      setnumberGuessed = _useState6[1];\n\n  var gameOverHandler = function gameOverHandler(rounds, numberGuessed) {\n    setNumberOfGuesses(rounds);\n    setnumberGuessed(numberGuessed);\n  };\n\n  var restartGame = function restartGame() {\n    console.log(\"Restart\");\n    setSelectedNumber(undefined);\n    setNumberOfGuesses(0);\n  };\n\n  var startGameHandler = function startGameHandler(number) {\n    console.log(number);\n    setSelectedNumber(number);\n  };\n\n  var content = _jsx(StartGameScreen, {\n    onStartGame: startGameHandler\n  });\n\n  if (selectedNumber && numberOfGuesses === 0) {\n    content = _jsx(GameScreen, {\n      selectedNumber: selectedNumber,\n      onGameOver: gameOverHandler\n    });\n  } else if (selectedNumber && numberOfGuesses > 0) {\n    content = _jsx(GameOverScreen, {\n      rounds: numberOfGuesses,\n      numberGuessed: numberGuessed,\n      onRestartGame: restartGame\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Header, {\n      title: \"Guess the Number\"\n    }), content]\n  });\n}\nvar styles = StyleSheet.create({\n  screen: {\n    flexDirection: 'column',\n    flex: 1\n  },\n  button: {\n    with: 100\n  }\n});","map":{"version":3,"sources":["C:/Users/nano0/Desktop/NumberGuesser/App.js"],"names":["useState","Header","GameScreen","StartGameScreen","GameOverScreen","Colors","App","undefined","selectedNumber","setSelectedNumber","numberOfGuesses","setNumberOfGuesses","numberGuessed","setnumberGuessed","gameOverHandler","rounds","restartGame","console","log","startGameHandler","number","content","styles","screen","StyleSheet","create","flexDirection","flex","button","with"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,OAAvB;;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,UAAP;AACA,OAAOC,eAAP;AACA,OAAOC,cAAP;AACA,OAAOC,MAAP;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAG5B,kBAA4CN,QAAQ,CAACO,SAAD,CAApD;AAAA;AAAA,MAAOC,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,mBAA8CT,QAAQ,CAAC,CAAD,CAAtD;AAAA;AAAA,MAAOU,eAAP;AAAA,MAAwBC,kBAAxB;;AACA,mBAA0CX,QAAQ,CAACO,SAAD,CAAlD;AAAA;AAAA,MAAOK,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASH,aAAT,EAA2B;AACjDD,IAAAA,kBAAkB,CAACI,MAAD,CAAlB;AACAF,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,GAHD;;AAKA,MAAMI,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAT,IAAAA,iBAAiB,CAACF,SAAD,CAAjB;AACAI,IAAAA,kBAAkB,CAAC,CAAD,CAAlB;AACD,GAJD;;AAMA,MAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAAY;AACnCH,IAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACAX,IAAAA,iBAAiB,CAACW,MAAD,CAAjB;AACD,GAHD;;AAKA,MAAIC,OAAO,GAAG,KAAC,eAAD;AAAiB,IAAA,WAAW,EAAEF;AAA9B,IAAd;;AAEA,MAAIX,cAAc,IAAIE,eAAe,KAAK,CAA1C,EAA8C;AAC5CW,IAAAA,OAAO,GAAG,KAAC,UAAD;AAAY,MAAA,cAAc,EAAEb,cAA5B;AAA4C,MAAA,UAAU,EAAEM;AAAxD,MAAV;AACD,GAFD,MAEO,IAAKN,cAAc,IAAIE,eAAe,GAAG,CAAzC,EAA6C;AAClDW,IAAAA,OAAO,GAAG,KAAC,cAAD;AAAgB,MAAA,MAAM,EAAEX,eAAxB;AAAyC,MAAA,aAAa,EAAEE,aAAxD;AAAuE,MAAA,aAAa,EAAEI;AAAtF,MAAV;AACD;;AAID,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACC,MAApB;AAAA,eACE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAf,MADF,EAEGF,OAFH;AAAA,IADF;AASD;AAED,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,MAAM,EAAE;AACNG,IAAAA,aAAa,EAAE,QADT;AAENC,IAAAA,IAAI,EAAE;AAFA,GADuB;AAK/BC,EAAAA,MAAM,EAAC;AACLC,IAAAA,IAAI,EAAE;AADD;AALwB,CAAlB,CAAf","sourcesContent":["import {useState} from 'react'\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport Header from './components/Header';\nimport GameScreen from './screens/GameScreen';\nimport StartGameScreen from './screens/StartGameScreen';\nimport GameOverScreen from './screens/GameOverScreen';\nimport Colors from './constants/Colors';\n\nexport default function App() {\n\n\n  const [selectedNumber, setSelectedNumber] = useState(undefined);\n  const [numberOfGuesses, setNumberOfGuesses] = useState(0);\n  const [numberGuessed, setnumberGuessed] = useState(undefined);\n\n  const gameOverHandler = (rounds, numberGuessed) => {\n    setNumberOfGuesses(rounds);\n    setnumberGuessed(numberGuessed);\n  }\n\n  const restartGame = () => {\n    console.log(\"Restart\");\n    setSelectedNumber(undefined);\n    setNumberOfGuesses(0);\n  }\n\n  const startGameHandler = (number) => {\n    console.log(number)\n    setSelectedNumber(number);\n  }\n\n  let content = <StartGameScreen onStartGame={startGameHandler}/>;\n\n  if( selectedNumber && numberOfGuesses === 0 ) {\n    content = <GameScreen selectedNumber={selectedNumber} onGameOver={gameOverHandler} />\n  } else if ( selectedNumber && numberOfGuesses > 0 ) {\n    content = <GameOverScreen rounds={numberOfGuesses} numberGuessed={numberGuessed} onRestartGame={restartGame}/>\n  }\n    \n\n  \n  return (\n    <View style={styles.screen}>\n      <Header title={\"Guess the Number\"} />\n      {content}\n      {/*selectedNumber === undefined && <StartGameScreen/>}\n      {selectedNumber !== undefined && <GameScreen/>*/}\n    </View>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flexDirection: 'column',\n    flex: 1\n  },\n  button:{\n    with: 100,\n},\n});\n"]},"metadata":{},"sourceType":"module"}