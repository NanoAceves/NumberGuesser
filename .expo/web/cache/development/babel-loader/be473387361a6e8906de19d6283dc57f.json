{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Header from \"./components/Header\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport GameScreen from \"./screens/GameScreen\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var getSomething = function getSomething() {\n    return 'Something';\n  };\n\n  var getSomething2 = function getSomething2() {\n    return _regeneratorRuntime.async(function getSomething2$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", 'Something');\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedNumber = _useState2[0],\n      setSelectedNumber = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      numberOfGuesses = _useState4[0],\n      setNumberOfGuesses = _useState4[1];\n\n  var gameOverHandler = function gameOverHandler(rounds) {\n    setNumberOfGuesses(rounds);\n  };\n\n  var startGameHandler = function startGameHandler(number) {\n    setSelectedNumber(number);\n  };\n\n  var restartGame = function restartGame() {\n    setNumberOfGuesses(0);\n    setSelectedNumber(undefined);\n  };\n\n  var content = _jsx(StartGameScreen, {\n    onStartGame: startGameHandler\n  });\n\n  if (selectedNumber && numberOfGuesses === 0) {\n    content = _jsx(GameScreen, {\n      selectedNumber: selectedNumber,\n      onGameOver: gameOverHandler\n    });\n  } else if (selectedNumber && numberOfGuesses > 0) {\n    content = _jsx(GameOverScreen, {\n      rounds: numberOfGuesses,\n      onGameRestart: restartGame\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Header, {\n      title: \"Guess the number\"\n    }), content]\n  });\n}\nvar styles = StyleSheet.create({\n  screen: {\n    flexDirection: 'column',\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/nano0/Desktop/NumberGuesser/App.js"],"names":["useState","Header","GameOverScreen","GameScreen","StartGameScreen","App","getSomething","getSomething2","undefined","selectedNumber","setSelectedNumber","numberOfGuesses","setNumberOfGuesses","gameOverHandler","rounds","startGameHandler","number","restartGame","content","styles","screen","StyleSheet","create","flexDirection","flex"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;;;AAGA,OAAOC,MAAP;AACA,OAAOC,cAAP;AACA,OAAOC,UAAP;AACA,OAAOC,eAAP;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAgC5B,MAAMC,YAAY,GAAC,SAAbA,YAAa,GAAI;AACrB,WAAO,WAAP;AACD,GAFD;;AAIA,MAAMC,aAAa,GAAC,SAAdA,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA,6CACX,WADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAKA,kBAA0CP,QAAQ,CAACQ,SAAD,CAAlD;AAAA;AAAA,MAAOC,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,mBAA4CV,QAAQ,CAAC,CAAD,CAApD;AAAA;AAAA,MAAOW,eAAP;AAAA,MAAwBC,kBAAxB;;AAEA,MAAMC,eAAe,GAAC,SAAhBA,eAAgB,CAACC,MAAD,EAAU;AAC9BF,IAAAA,kBAAkB,CAACE,MAAD,CAAlB;AACD,GAFD;;AAIA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAAY;AACnCN,IAAAA,iBAAiB,CAACM,MAAD,CAAjB;AACD,GAFD;;AAIA,MAAMC,WAAW,GAAC,SAAZA,WAAY,GAAI;AACpBL,IAAAA,kBAAkB,CAAC,CAAD,CAAlB;AACAF,IAAAA,iBAAiB,CAACF,SAAD,CAAjB;AACD,GAHD;;AAKA,MAAIU,OAAO,GAAC,KAAC,eAAD;AAAiB,IAAA,WAAW,EAAEH;AAA9B,IAAZ;;AAEA,MAAGN,cAAc,IAAIE,eAAe,KAAG,CAAvC,EAAyC;AACvCO,IAAAA,OAAO,GAAC,KAAC,UAAD;AAAY,MAAA,cAAc,EAAET,cAA5B;AAA4C,MAAA,UAAU,EAAEI;AAAxD,MAAR;AACD,GAFD,MAEM,IAAGJ,cAAc,IAAIE,eAAe,GAAC,CAArC,EAAuC;AAC3CO,IAAAA,OAAO,GAAC,KAAC,cAAD;AAAgB,MAAA,MAAM,EAAEP,eAAxB;AAAyC,MAAA,aAAa,EAAEM;AAAxD,MAAR;AACD;;AAGD,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC,MAApB;AAAA,eACE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAf,MADF,EAEGF,OAFH;AAAA,IADF;AAMD;AAED,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,MAAM,EAAE;AACNG,IAAAA,aAAa,EAAC,QADR;AAENC,IAAAA,IAAI,EAAE;AAFA;AADuB,CAAlB,CAAf","sourcesContent":["import {useState} from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport Header from './components/Header';\nimport GameOverScreen from './screens/GameOverScreen';\nimport GameScreen from './screens/GameScreen';\nimport StartGameScreen from './screens/StartGameScreen';\n\nexport default function App() {\n\n/*\n  const thisIsMyPromise=new Promise((resolve, reject)=>{\n    setTimeout(()=>{\n      console.log('2 seconds later...')\n      resolve();\n    }, 2000);\n  })\n\n  thisIsMyPromise.then(()=>{\n    console.log('I was resolved')\n  }).catch(()=>{\n\n  }).finally(()=>{\n\n  })\n*/\n\n  //console.log('thisIsMyPromise', thisIsMyPromise)\n\n // const endpoint =fetch('https://pokeapi.co/api/v2/pokemon/123')\n // const a = endpoint.then(()=>{})\n\n /* .then((response)=>{\n    response.json().then(data=>{\n      console.log('data', data)\n      console.log('data', data.name)\n    })\n  })*/\n\n\n  const getSomething=()=>{\n    return 'Something'\n  }\n\n  const getSomething2=async()=>{\n    return 'Something'\n  }\n\n\n  const [selectedNumber, setSelectedNumber]=useState(undefined)\n  const [numberOfGuesses, setNumberOfGuesses]=useState(0)\n\n  const gameOverHandler=(rounds)=>{\n    setNumberOfGuesses(rounds)\n  }\n\n  const startGameHandler = (number) => {\n    setSelectedNumber(number);\n  }\n\n  const restartGame=()=>{\n    setNumberOfGuesses(0)\n    setSelectedNumber(undefined)\n  }\n\n  let content=<StartGameScreen onStartGame={startGameHandler}/>\n\n  if(selectedNumber && numberOfGuesses===0){\n    content=<GameScreen selectedNumber={selectedNumber} onGameOver={gameOverHandler}/>\n  }else if(selectedNumber && numberOfGuesses>0){\n    content=<GameOverScreen rounds={numberOfGuesses} onGameRestart={restartGame}/>\n  }\n\n\n  return (\n    <View style={styles.screen}>\n      <Header title={\"Guess the number\"}/>\n      {content}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flexDirection:'column',\n    flex: 1\n  },\n});\n"]},"metadata":{},"sourceType":"module"}