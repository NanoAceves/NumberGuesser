{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Card from \"../components/Card\";\nimport Colors from \"../constants/Colors\";\nimport Input from \"../components/Input\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport { globalIndexes as limit } from \"../constants/constants\";\nimport { useFetchPokemon } from \"../hooks/useFetchpokemon\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StartGameScreen = function StartGameScreen(_ref) {\n  var onStartGame = _ref.onStartGame;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredValue = _useState2[0],\n      setEnteredValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmed = _useState4[0],\n      setConfirmed = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedNumber = _useState6[0],\n      setSelectedNumber = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      name = _useState8[0],\n      setName = _useState8[1];\n\n  var _useState9 = useState({\n    name: '',\n    img: ''\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      poke = _useState10[0],\n      setPoke = _useState10[1];\n\n  var numberInputHandler = function numberInputHandler(input) {\n    setEnteredValue(input.replace(/[^0-9]/g, ''));\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredValue('');\n    setConfirmed(false);\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredValue);\n    if (isNaN(chosenNumber) || chosenNumber <= limit.MIN_INDEX || chosenNumber > limit.MAX_INDEX) return;\n    setConfirmed(true);\n    setSelectedNumber(chosenNumber);\n    setEnteredValue('');\n    setPokemon();\n  };\n\n  var setPokemon = function setPokemon() {\n    var _await$useFetchPokemo, _await$useFetchPokemo2, name, img;\n\n    return _regeneratorRuntime.async(function setPokemon$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(useFetchPokemon(enteredValue));\n\n          case 2:\n            _await$useFetchPokemo = _context.sent;\n            _await$useFetchPokemo2 = _slicedToArray(_await$useFetchPokemo, 2);\n            name = _await$useFetchPokemo2[0];\n            img = _await$useFetchPokemo2[1];\n            setName(name);\n            setPoke({\n              name: name,\n              img: img\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var confirmedOutput;\n\n  if (confirmed) {\n    confirmedOutput = _jsxs(Card, {\n      children: [_jsx(Text, {\n        children: \"You selected:\"\n      }), _jsx(NumberContainer, {\n        children: selectedNumber\n      }), _jsx(Button, {\n        title: \"Ready to start game?\",\n        onPress: function onPress() {\n          return onStartGame(selectedNumber);\n        },\n        color: Colors.tertiary\n      }), _jsx(Text, {\n        children: name\n      }), _jsx(Image, {\n        style: styles.pokeImage,\n        source: {\n          uri: poke.img\n        }\n      })]\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsxs(Card, {\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Select a Number\"\n      }), _jsx(Input, {\n        style: styles.input,\n        blurOnSubmit: true,\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        keyboardType: \"number-pad\",\n        maxLenght: 3,\n        onChangeText: numberInputHandler,\n        value: enteredValue\n      }), _jsxs(View, {\n        style: styles.buttonContainer,\n        children: [_jsx(View, {\n          style: styles.button,\n          children: _jsx(Button, {\n            style: styles.button,\n            title: \"Reset\",\n            color: Colors.secondary,\n            onPress: resetInputHandler\n          })\n        }), _jsx(View, {\n          style: styles.button,\n          children: _jsx(Button, {\n            style: styles.button,\n            title: \"Confirm\",\n            color: Colors.primary,\n            onPress: confirmInputHandler\n          })\n        })]\n      })]\n    }), confirmedOutput]\n  });\n};\n\nvar styles = StyleSheet.create({\n  selectedContainer: {\n    marginTop: 20,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 20,\n    marginVertical: 10\n  },\n  button: {\n    with: 100\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    justifyContent: 'space-between',\n    paddingHorizontal: 15\n  },\n  input: {\n    width: 50,\n    textAlign: 'center'\n  },\n  pokeImage: {\n    width: 100,\n    height: 100\n  }\n});\nexport default StartGameScreen;","map":{"version":3,"sources":["C:/Users/nano0/Desktop/NumberGuesser/screens/StartGameScreen.js"],"names":["useState","Card","Colors","Input","NumberContainer","globalIndexes","limit","useFetchPokemon","StartGameScreen","onStartGame","enteredValue","setEnteredValue","confirmed","setConfirmed","undefined","selectedNumber","setSelectedNumber","name","setName","img","poke","setPoke","numberInputHandler","input","replace","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","MIN_INDEX","MAX_INDEX","setPokemon","confirmedOutput","tertiary","styles","pokeImage","uri","screen","title","buttonContainer","button","secondary","primary","StyleSheet","create","selectedContainer","marginTop","alignItems","justifyContent","flex","padding","fontSize","marginVertical","with","flexDirection","width","paddingHorizontal","textAlign","height"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TextInput, View, Image } from \"react-native\";\r\nimport Card from \"../components/Card\";\r\nimport Colors from \"../constants/Colors\";\r\nimport Input from \"../components/Input\";\r\nimport NumberContainer from \"../components/NumberContainer\";\r\n\r\nimport { globalIndexes as limit } from \"../constants/constants\";\r\nimport { useFetchPokemon } from \"../hooks/useFetchpokemon\";\r\n \r\n const StartGameScreen = ({ onStartGame }) => {\r\n     \r\n    const [enteredValue, setEnteredValue] = useState('')\r\n    const [confirmed, setConfirmed] = useState(false)\r\n    const [selectedNumber, setSelectedNumber] = useState(undefined)\r\n\r\n    const [name, setName] = useState(undefined)\r\n    const [poke, setPoke]=useState({name:'', img:''})\r\n\r\n    const numberInputHandler = input => {\r\n        setEnteredValue(input.replace(/[^0-9]/g, ''));\r\n    }\r\n\r\n    const resetInputHandler = () => {\r\n        setEnteredValue('')\r\n        setConfirmed(false)\r\n    }\r\n\r\n    const confirmInputHandler = () => {\r\n        const chosenNumber = parseInt(enteredValue);\r\n\r\n        if(isNaN(chosenNumber) || chosenNumber <= limit.MIN_INDEX || chosenNumber > limit.MAX_INDEX) return\r\n        setConfirmed(true)\r\n        setSelectedNumber(chosenNumber)\r\n        setEnteredValue('')\r\n        setPokemon()\r\n    }\r\n\r\n    const setPokemon = async () => {\r\n        const [name, img] = await useFetchPokemon(enteredValue);\r\n        setName(name)\r\n\r\n        setPoke({name: name, img: img})\r\n    } \r\n\r\n    let confirmedOutput;\r\n\r\n    if(confirmed) {\r\n        confirmedOutput = (\r\n            <Card>\r\n                <Text>You selected:</Text>\r\n                <NumberContainer>{selectedNumber}</NumberContainer>\r\n                <Button\r\n                    title='Ready to start game?'\r\n                    onPress={ () => onStartGame(selectedNumber) }\r\n                    color={Colors.tertiary}\r\n                />\r\n                <Text>{name}</Text>\r\n                <Image style={styles.pokeImage} source={{uri:poke.img}}/>\r\n            </Card>\r\n            \r\n        )\r\n    }\r\n\r\n    return (\r\n     <View style={styles.screen}>\r\n        <Card>\r\n            <Text style={styles.title}>Select a Number</Text>\r\n            <Input\r\n                style={styles.input}\r\n                blurOnSubmit //Android\r\n                autoCapitalize='none'\r\n                autoCorrect={false}\r\n                keyboardType=\"number-pad\"\r\n                maxLenght={3}\r\n                onChangeText={numberInputHandler}\r\n                value={enteredValue}\r\n            />\r\n            <View style={styles.buttonContainer}>\r\n                <View style={styles.button}>\r\n                    <Button \r\n                        style={styles.button}\r\n                        title=\"Reset\"\r\n                        color={Colors.secondary}\r\n                        onPress={resetInputHandler}\r\n                    />\r\n                </View>\r\n                <View style={styles.button}>\r\n                    <Button \r\n                        style={styles.button}\r\n                        title=\"Confirm\"\r\n                        color={Colors.primary}\r\n                        onPress={confirmInputHandler}\r\n                    />  \r\n                </View> \r\n            </View>\r\n        </Card>\r\n        {confirmedOutput}\r\n        \r\n     </View>\r\n   )\r\n }\r\n\r\n const styles = StyleSheet.create({\r\n     selectedContainer: {\r\n         marginTop: 20,\r\n         alignItems: 'center',\r\n         justifyContent: 'center'\r\n     },\r\n     screen: {\r\n         flex: 1,\r\n         padding: 10,\r\n         alignItems: 'center'\r\n     },\r\n     title: {\r\n         fontSize: 20,\r\n         marginVertical: 10,\r\n     },\r\n     button:{\r\n         with: 100,\r\n     },\r\n     buttonContainer:{\r\n         flexDirection: 'row',\r\n         width: '100%',\r\n         justifyContent: 'space-between',\r\n         paddingHorizontal: 15,\r\n     },\r\n     input: {\r\n         width: 50,\r\n         textAlign: 'center'\r\n     },\r\n     pokeImage:{\r\n         width:100, \r\n         height:100\r\n     }\r\n\r\n })\r\n\r\n export default StartGameScreen;"]},"metadata":{},"sourceType":"module"}